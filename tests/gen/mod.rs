//! Generated by sqlx-dbml 0.1.0-beta.2

pub mod bakery {
	use sqlx::*;

	#[derive(FromRow)]
	pub struct Model {
		pub id: i32,
		pub name: String,
		pub profit_margin: f64,
	}

	#[derive(FromRow)]
	pub struct CreateModel {
		pub id: i32,
		pub name: String,
		pub profit_margin: f64,
	}

	#[derive(FromRow)]
	pub struct UpdateModel {
		pub id: i32,
		pub name: Option<String>,
		pub profit_margin: Option<f64>,
	}
}

pub mod customer {
	use sqlx::*;

	#[derive(FromRow)]
	pub struct Model {
		pub id: i32,
		pub name: String,
		pub notes: Option<String>,
	}

	#[derive(FromRow)]
	pub struct CreateModel {
		pub id: i32,
		pub name: String,
		pub notes: Option<String>,
	}

	#[derive(FromRow)]
	pub struct UpdateModel {
		pub id: i32,
		pub name: Option<String>,
		pub notes: Option<String>,
	}
}

pub mod baker {
	use sqlx::*;

	#[derive(FromRow)]
	pub struct Model {
		pub id: i32,
		pub name: String,
		pub contact_details: types::JsonValue,
		pub bakery_id: i32,
	}

	#[derive(FromRow)]
	pub struct CreateModel {
		pub id: i32,
		pub name: String,
		pub contact_details: types::JsonValue,
		pub bakery_id: i32,
	}

	#[derive(FromRow)]
	pub struct UpdateModel {
		pub id: i32,
		pub name: Option<String>,
		pub contact_details: Option<types::JsonValue>,
		pub bakery_id: Option<i32>,
	}
}

pub mod cake {
	use sqlx::*;

	#[derive(FromRow)]
	pub struct Model {
		pub id: i32,
		pub name: String,
		pub price: types::Decimal,
		pub bakery_id: i32,
		pub gluten_free: bool,
		pub serial: types::Uuid,
	}

	#[derive(FromRow)]
	pub struct CreateModel {
		pub id: i32,
		pub name: String,
		pub price: types::Decimal,
		pub bakery_id: i32,
		pub gluten_free: bool,
		pub serial: types::Uuid,
	}

	#[derive(FromRow)]
	pub struct UpdateModel {
		pub id: i32,
		pub name: Option<String>,
		pub price: Option<types::Decimal>,
		pub bakery_id: Option<i32>,
		pub gluten_free: Option<bool>,
		pub serial: Option<types::Uuid>,
	}
}

pub mod order {
	use sqlx::*;

	#[derive(FromRow)]
	pub struct Model {
		pub id: i32,
		pub total: types::Decimal,
		pub bakery_id: i32,
		pub customer_id: i32,
		pub placed_at: types::chrono::NaiveDateTime,
	}

	#[derive(FromRow)]
	pub struct CreateModel {
		pub id: i32,
		pub total: types::Decimal,
		pub bakery_id: i32,
		pub customer_id: i32,
		pub placed_at: types::chrono::NaiveDateTime,
	}

	#[derive(FromRow)]
	pub struct UpdateModel {
		pub id: i32,
		pub total: Option<types::Decimal>,
		pub bakery_id: Option<i32>,
		pub customer_id: Option<i32>,
		pub placed_at: Option<types::chrono::NaiveDateTime>,
	}
}

pub mod cakes_bakers {
	use sqlx::*;

	#[derive(FromRow)]
	pub struct Model {
		pub cake_id: i32,
		pub baker_id: i32,
	}

	#[derive(FromRow)]
	pub struct CreateModel {
		pub cake_id: i32,
		pub baker_id: i32,
	}

	#[derive(FromRow)]
	pub struct UpdateModel {
		pub cake_id: Option<i32>,
		pub baker_id: Option<i32>,
	}
}

pub mod lineitem {
	use sqlx::*;

	#[derive(FromRow)]
	pub struct Model {
		pub id: i32,
		pub price: types::Decimal,
		pub quantity: i32,
		pub order_id: i32,
		pub cake_id: i32,
	}

	#[derive(FromRow)]
	pub struct CreateModel {
		pub id: i32,
		pub price: types::Decimal,
		pub quantity: i32,
		pub order_id: i32,
		pub cake_id: i32,
	}

	#[derive(FromRow)]
	pub struct UpdateModel {
		pub id: i32,
		pub price: Option<types::Decimal>,
		pub quantity: Option<i32>,
		pub order_id: Option<i32>,
		pub cake_id: Option<i32>,
	}
}
